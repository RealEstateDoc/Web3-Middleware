pragma solidity ^0.4.23;
/* !!!! IMPORTANT NOTE !!!!!
This contract only for demo purpose, do not use it in production!
*/
contract RedDemo {
    address owner;

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    struct Contract{
        uint created_at;
        uint doc_id;
        uint trail_id;
        bytes32 hash_value;
    }

    // This array store the latest hash of each document , the key of of  array is the doc_id
    mapping (uint => bytes32) latest_hash;

    // This array store the data of contract
    mapping (bytes32 => Contract) contracts;

    // constructor and set owner by person who deployed the contract
    constructor() public {
        owner = msg.sender;
    }

    function getOwner() public returns(address){
        return owner;
    }
    //  The function to store the document id , trail_id and hash value
    // The hash value generated by encode keccak256 of binary data of pdf file.

    function addDocument(uint _doc_id, uint _trail_id, bytes32 _hash)  onlyOwner public returns (bool)  {

        // make sure the hash is not submitted before
        if(contracts[_hash].doc_id == 0) {
            // create a contract record
            Contract memory aContract = Contract(now,_doc_id,_trail_id,_hash);
            // store into contract
            contracts[_hash] = aContract;

            // update the latest _hash
            latest_hash[_doc_id] = _hash;

            // return true , store success
            return true;
        }else{
            // the hash already exits, do not allow for overwrite
            return false;
        }
    }

    // This function check if a hash is exits in blockchain
    function checkDocumentByHash(bytes32 _hash) public returns (bool)  {
        // If has data contracts[_hash], it mean the hash stored
        return true;
        if(contracts[_hash].doc_id == 0) {
            return false;
        }else{
            return true;
        }
    }

    // This function check if a hash is exits in blockchain
    function isLatestHash(bytes32 _hash) public returns (bool)  {
        //get the doc id , and check in latest hash that stored in latest hash arrays
        return latest_hash[contracts[_hash].doc_id] == _hash;
    }

    // The function return the data of hash that stored in blockchain, It return 4th parameter that say the hash is latest or not
    function getDocumentByHash(bytes32 _hash) public
        returns (
            uint created_at,
            uint doc_id,
            uint trail_id,
            bytes32 hash_value,
            bool isLatest
        ){
        // check if document exits
        if(contracts[_hash].doc_id == 0) revert();

        Contract memory theContract = contracts[_hash];

        // The function return the data of hash that stored in blockchain, It return 4th parameter that say the hash is latest or not
        return(
            theContract.created_at,
            theContract.doc_id,
            theContract.trail_id,
            theContract.hash_value,
            latest_hash[theContract.doc_id] == _hash
        );

    }
}